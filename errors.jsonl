{"repo_name": "IgorOlshanskiy/hillel-python-courses", "repo_url": "https://github.com/IgorOlshanskiy/hillel-python-courses", "gha_language": "Python", "files": [{"blob_id": "4b513c740307295921f5a7b37edfb98c0879c78d", "path": "/homework_class3.py", "content_id": "99fb7d9fda6f54725189b1d303bbeb055ad1bf11", "language": "Python", "length_bytes": 2977, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.6162631511688232, "alpha_fraction": 0.5906806588172913, "num_lines": 84, "avg_line_length": 25.059524536132812, "max_line_length": 111, "content": "import re\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-1\n#\n# \u0414\u0430\u043d \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442. \u0421\u043e\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u0441\u0435 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u0432 \u043e\u0434\u043d\u043e \u0441\u043b\u043e\u0432\u043e \u0432 \u0442\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u043a\u0430\u043a \u043e\u043d\u0438 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0435\u043a\u0441\u0442\u0435.\n# \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \u0442\u0435\u043a\u0441\u0442 = \"How are you?\u00a0Eh, ok.\u00a0Low or\u00a0Lower?\u00a0Ohh.\",\n# \u0435\u0441\u043b\u0438 \u043c\u044b \u0441\u043e\u0431\u0435\u0440\u0435\u043c \u0432\u0441\u0435 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b, \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \"HELLO\".\n\n\ndef task_1():\n    string = \"How are you?\u00a0Eh, ok.\u00a0Low or\u00a0Lower?\u00a0Ohh.\"\n    new_tupl = []\n    for i in string:\n        if i.isupper():\n            new_tupl += i\n    string_result = \"\".join(new_tupl)\n    return string_result\n\n\nprint(\"\u0417\u0430\u0434\u0430\u0447\u0430-1:\", task_1())\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-2\n# \u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \u0447\u0435\u0442\u043d\u044b\u043c\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438 (0-\u0439, 2-\u0439, 4-\u0439 \u0438\u0442\u0434),\n# \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u044d\u0442\u0443 \u0441\u0443\u043c\u043c\u0443 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n# \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435, \u0447\u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438\u043c\u0435\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 0.\n# mas = [0, 1, 2, 3, 4, 5] = 0 + 2 + 4 = 6 * 5 = 30\n\n\ndef task2():\n    mas = [0, 1, 2, 3, 4, 5]\n    res = 0\n    for i in mas:\n        if i % 2 == 0:\n            res += i * mas[-1]\n    return res\n\n\nprint(\"\u0417\u0430\u0434\u0430\u0447\u0430-2:\", task2())\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-3\n# \u0414\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0438 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0435\u0435 \u043f\u0435\u0440\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e.\n# \u041f\u0440\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\u044b:\n#   1)\u0412 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u043e\u0433\u0443\u0442 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0442\u0441\u044f \u0442\u043e\u0447\u043a\u0438 \u0438 \u0437\u0430\u043f\u044f\u0442\u044b\u0435\n#   2)\u0421\u0442\u0440\u043e\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c\u0441\u044f \u0441 \u0431\u0443\u043a\u0432\u044b \u0438\u043b\u0438, \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0441 \u043f\u0440\u043e\u0431\u0435\u043b\u0430 \u0438\u043b\u0438 \u0442\u043e\u0447\u043a\u0438\n#   3)\u0412 \u0441\u043b\u043e\u0432\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444 \u0438 \u043e\u043d \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e \u0441\u043b\u043e\u0432\u0430\n#   4)\u0412\u0435\u0441\u044c \u0442\u0435\u043a\u0441\u0442 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0438\u043c \u0441\u043b\u043e\u0432\u043e\u043c \u0438 \u0432\u0441\u0435\ndef task_3():\n    string = \",.\\ Ho'w are you?\u00a0Eh, ok.\"\n    match = re.search(\"[A-Za-z']+\", string)\n    return match.group(0)\n\n\nprint(\"\u0417\u0430\u0434\u0430\u0447\u0430-3:\", task_3())\n# \u0417\u0430\u0434\u0430\u0447\u0430-4\n# \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430 \u043d\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0435\u0440\u0432\u044b\u0439 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u043c\u0435\u043d\u044f\u043d\u044b \u043c\u0435\u0441\u0442\u0430\u043c\u0438.\n\n\ndef task_4():\n    string_new = \"How are you\"\n    #    str_list = [x for x in string_new]\n    str_list = list(string_new)\n    str_list[-1], str_list[0] = str_list[0], str_list[-1]\n    string_new = \"\".join(str_list)\n    return string_new\n\n\nprint(\"\u0417\u0430\u0434\u0430\u0447\u0430-4:\", task_4())\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-5\n# \u0414\u0430\u043d \u0442\u0430\u043f\u043b(tuple), \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0435\u0433\u043e \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u043d\u0443\u0442\u044c \u0432 \u0441\u0442\u0440\u0438\u043d\u0433.\n# \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\n# ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's') == 'exercises\n\n\ndef task_5():\n    tup = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')\n    string_tup = \"\".join(tup)\n    return string_tup\n\n\nprint(\"\u0417\u0430\u0434\u0430\u0447\u0430-5:\", task_5())\n"}, {"blob_id": "f33d2ba9f4e5875a6212ce3ca021da2e1b3935a3", "path": "/homework_class2.py", "content_id": "d49d5cd861701f56e5966567973525b5d068a34f", "language": "Python", "length_bytes": 4856, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.5488975644111633, "alpha_fraction": 0.5180285573005676, "num_lines": 126, "avg_line_length": 29.595237731933594, "max_line_length": 111, "content": "# 1)\u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439\u2028\n# 1.1) \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043a\u043b\u044e\u0447\u0430 \u2018age'\u2028\n# 1.2) \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043a\u043b\u044e\u0447\u0430 'city'\u2028\n# \u0432\u044b\u0432\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0442\u0430\u043a\u043e\u0433\u043e \u0432\u0438\u0434\u0430 :\n# result = {\n#    'Kiev':  [{'name': 'Viktor', 'age': 30 },\n#               {'name': 'Andrey', 'age': 34}],\n#    'Dnepr': [{'name': 'Maksim', 'age': 20 },\n#               {'name': 'Artem', 'age': 50}],\n#    'Lviv': [{'name': 'Vladimir', 'age': 32 },\n#              {'name': 'Dmitriy', 'age': 21}]}\n\nfrom itertools import groupby\nfrom operator import itemgetter\nfrom collections import Counter\n\ndata = [\n    {'name': 'Viktor', 'city': 'Kiev', 'age': 30},\n    {'name': 'Maksim', 'city': 'Dnepr', 'age': 20},\n    {'name': 'Vladimir', 'city': 'Lviv', 'age': 32},\n    {'name': 'Andrey', 'city': 'Kiev', 'age': 34},\n    {'name': 'Artem', 'city': 'Dnepr', 'age': 50},\n    {'name': 'Dmitriy', 'city': 'Lviv', 'age': 21}]\n\n\ndef task_1_1():\n    data.sort(key=lambda k: k[\"age\"], )\n    return data[:]\n\n\nprint(\"1.1) \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043a\u043b\u044e\u0447\u0430 \u2018age'\u2028: \", task_1_1())\n\n\n# \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1.2 \u043d\u0435 \u043e\u0441\u0438\u043b\u0438\u043b \u0432\u0441\u0451 \u043d\u0430 \u0447\u0442\u043e \u0445\u0432\u0430\u0442\u0438\u043b\u043e \u0441\u0438\u043b:\ndef task_1_2():\n    data1 = [\n        {'name': 'Viktor', 'city': 'Kiev', 'age': 30},\n        {'name': 'Maksim', 'city': 'Dnepr', 'age': 20},\n        {'name': 'Vladimir', 'city': 'Lviv', 'age': 32},\n        {'name': 'Andrey', 'city': 'Kiev', 'age': 34},\n        {'name': 'Artem', 'city': 'Dnepr', 'age': 50},\n        {'name': 'Dmitriy', 'city': 'Lviv', 'age': 21}]\n    data1.sort(key=itemgetter('city'))\n    return data1\n\n\nprint(\"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1.2 \u043d\u0435 \u043e\u0441\u0438\u043b\u0438\u043b \u0432\u0441\u0451 \u043d\u0430 \u0447\u0442\u043e \u0445\u0432\u0430\u0442\u0438\u043b\u043e \u0441\u0438\u043b:\", task_1_2())\n\n\n# =======================================================\n# 2) \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n# \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0443\u044e\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n# \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\n# def most_frequent(list_var):\n# your code is here\n#    return\n# most_frequent(['a', 'a', 'bi', 'bi', 'bi']) == 'bi'\n\ndef task_2():\n    string = ['a', 'a', 'bi', 'bi', 'bi', 'ggg', 'ggg', 'ggg', 'ggg']\n    max_occur = Counter(string)\n    return max_occur.most_common(1)\n\n\nprint(\"2) \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0443\u044e\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438:\", task_2())\n\n\n# =======================================================\n# 3) \u0414\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0446\u0438\u0444\u0440 \u0432 \u044d\u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043d\u0443\u043b\u0435\u0439.\n# \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\n# \u0414\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e 123405. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u0443\u0434\u0435\u0442: 1*2*3*4*5=120.\n\ndef task_3():\n    num = 1023405\n    num_list = [int(x) for x in str(num)]\n    list1 = sorted(num_list)\n    prod = 1\n    for i in list1:\n        if i != 0:\n            prod *= i\n    return prod\n\n\nprint(\"3) \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0446\u0438\u0444\u0440 \u0432 \u044d\u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043d\u0443\u043b\u0435\u0439: \", task_3())\n\n\n# =======================================================\n# 4) \u0415\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0438 \u0447\u0438\u0441\u043b\u043e n (def some_function(array, n)).\n# \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 n-\u0443\u044e \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c n. \u0415\u0441\u043b\u0438 n \u0437\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0442\u043e\u0433\u0434\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c -1.\n\n\ndef task_4():\n    n = 5\n    num_list = [1, 2, 3, 4, 5]\n    if n >= len(num_list):\n        return \"-1\"\n    else:\n        a = num_list.pop(n)\n        return a ** n\n\n\nprint(\"4) \u041d\u0430\u0439\u0442\u0438 n-\u0443\u044e \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c n. \u0415\u0441\u043b\u0438 n \u0437\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0442\u043e\u0433\u0434\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c -1: \",\n      task_4())\n\n\n# =======================================================\n# 5) \u0415\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 (\u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0431\u0435\u043b \u043c\u0435\u0436\u0434\u0443 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0438/\u0438\u043b\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438).\n# \u0421\u043b\u043e\u0432\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0431\u0443\u043a\u0432. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0442\u0440\u0438 \u0441\u043b\u043e\u0432\u0430\u00a0\u043f\u043e\u0434\u0440\u044f\u0434.\n# \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430, \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \"hello 1\u00a0one two three\u00a015 world\" \u0435\u0441\u0442\u044c \u0442\u0440\u0438 \u0441\u043b\u043e\u0432\u0430 \u043f\u043e\u0434\u0440\u044f\u0434.\ndef task_5():\n    str = \"hello 1 one two three four 15 world\"\n    cnt = 0\n    for i in str.split():\n        if i.isalpha():\n            cnt += 1\n            if cnt == 3:\n                return True\n        else:\n            cnt = 0\n\n\nprint(\"5) \u0415\u0441\u0442\u044c \u043b\u0438 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0442\u0440\u0438 \u0441\u043b\u043e\u0432\u0430\u00a0\u043f\u043e\u0434\u0440\u044f\u0434: \", task_5())\n"}, {"blob_id": "717528515ee8c09cbb53cbc8cdff70610297ac4b", "path": "/homework_class1.py", "content_id": "82ef860884d160d99db2712603a5866fcb4cfeb8", "language": "Python", "length_bytes": 2063, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.5763098001480103, "alpha_fraction": 0.4800683259963989, "num_lines": 56, "avg_line_length": 30.35714340209961, "max_line_length": 98, "content": "import random\n\n#1\ndef task_1():\n    keys_for_dict = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    dict_1 = {x: x*x for x in keys_for_dict}\n    return dict_1\nprint(\"1) \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c dict() \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043b\u044e\u0447\u0435\u0439 \u043d\u0438\u0436\u0435 \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435 (key : key* key): \", task_1())\n\n#2\ndef task_2():\n    list_21 = [x*2 for x in range(1, 51)]\n    return list_21\nprint(\"2) \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430.: \", task_2())\n\n#3\ndef task_3():\n    string_31 = \"some random string\"\n    new_string_31 = \"\"\n    con = \"bcdfghjklmnpqrstvwxz\"\n    vow = \"aeiouy\"\n    for char in string_31:\n        if char in con:\n            char = random.choice(vow)\n        new_string_31 += char\n    return new_string_31\nprint(\"3)\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u043d\u0430 \u0433\u043b\u0430\u0441\u043d\u044b\u0435: \", task_3())\n\n#4\ndef task_4():\n    mas = [10, 11, 2, 3, 5, 8, 23, 11, 2, 5, 76, 43, 2, 32, 76, 3, 10, 0, 1]\n    #4.1\n    mas_41 = list(set(mas))\n    #4.2\n    mas_42 = sorted(mas_41, reverse = True)\n    #4.3\n    #4.4\n    mas_44 = list(mas)\n    mas_44.reverse()\n    return mas, mas_41, mas_42[0:3], mas.index(min(mas)), mas_44\nprint(\"4) mas = [10, 11, 2, 3, 5, 8, 23, 11, 2, 5, 76, 43, 2, 32, 76, 3, 10, 0, 1] \", task_4()[0])\nprint(\"4.1) \u0443\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u043d\u0435\u0433\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b: \", task_4()[1])\nprint(\"4.2) \u0432\u044b\u0432\u0435\u0441\u0442\u0438 3 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430: \", task_4()[2])\nprint(\"4.3) \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u043d\u0434\u0435\u043a\u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430: \", task_4()[3])\nprint(\"4.4) \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435: \", task_4()[4])\n\n#5\ndef task_5():\n    dict_one = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    dict_two = {'a': 6, 'b': 7, 'z': 20, 'x': 40}\n    list_51 = (dict.keys(dict_one))\n    list_52 = (dict.keys(dict_two))\n    result = list(set(list_51) & set(list_52))\n    return result\nprint(\"5) \u041d\u0430\u0439\u0442\u0438 \u043e\u0431\u0449\u0438\u0435 \u043a\u043b\u044e\u0447\u0438 \u0432 \u0434\u0432\u0443\u0445 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\u0445:\u2028 \", task_5())\n"}, {"blob_id": "5206228896755dea01792a108d0682834fab9cfe", "path": "/homework_class5.py", "content_id": "69540b2fd4563cce4e9f57d215234dde7da14862", "language": "Python", "length_bytes": 3322, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.5809385180473328, "alpha_fraction": 0.5729356408119202, "num_lines": 110, "avg_line_length": 23.990909576416016, "max_line_length": 116, "content": "# LRU (least recently used) \u2014 \u044d\u0442\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u044b\u0442\u0435\u0441\u043d\u044f\u044e\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0435 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u043b\u0438\u0441\u044c.\n# \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e. \u0418 \u043a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n# \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 N \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0442\u0435\u0441\u043d\u0438\u0442\u044c \u0438\u0437 \u043a\u0435\u0448\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0435 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u043b\u043e\u0441\u044c.\n#\n#\n# \u0417\u0430\u0434\u0430\u0447\u0430 - 1\n# \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 lru_cache(\u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0439 \u0442\u043e\u043c\u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0432 Python).\n#\n# \u0417\u0430\u0434\u0430\u0447\u0430-2\n# \u0412\u0430\u0448 lru_cache \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434\n# cache_info  - \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u043a\u0435\u0448\u0430(\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u043b\u0430\u0441\u044c \u0432\u0430\u0448\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f,\n# \u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u044b\u043b\u043e \u0432\u0437\u044f\u0442\u043e \u0438\u0437 \u043a\u0435\u0448\u0430, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0441\u0442\u0430 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e \u0432 \u043a\u0435\u0448\u0435)\n#\n# \u0417\u0430\u0434\u0430\u0447\u0430-3\n# \u0412\u0430\u0448 lru_cache \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434\n# cache_clear - \u043e\u0447\u0438\u0449\u0430\u0435\u0442 \u043a\u0435\u0448\n#\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u043c\u0443 \u043c\u0435\u0442\u043e\u0434\u0443 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430\n\n# def decorator(my_func):\n#      def wrapper():\n#            my_func()\n#\n#      def cache_clear():\n#            pass\n#\n#      wrapper.cache_clear = cache_clear\n#      return wrapper\n#\n# @decorator\n# def my_func():\n#       pass\n#\n#\n# my_func.cache_clear()\n\n# def key_construct(args, kwargs):\n#     key = args\n#     if kwargs:\n#         key += tuple(sorted(kwargs.items()))\n#\n#     return key\nimport collections\nimport functools\n\n\ndef lru_cache(maxsize=3):\n    \"\"\"\"LRU cache decorator function\"\"\"\n\n    def decorating_function(func):\n        cache = collections.OrderedDict()\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = args\n            # key = key_construct(args, kwargs)\n\n            # try:\n            #     result = cache.pop(key)\n            #     wrapper.hits += 1\n            # except KeyError:\n            #     result = func(*args, **kwargs)\n            #     wrapper.misses += 1\n            if key in cache:\n                result = cache.pop(key)\n                wrapper.hits += 1\n            else:\n                result = func(*args, **kwargs)\n                wrapper.misses += 1\n\n                if len(cache) >= maxsize:\n                    cache.popitem()\n\n            cache[key] = result\n\n            return result\n\n        def cache_info():\n            \"\"\"LRU cache statistics\"\"\"\n            print({\n                'cache': dict(cache),\n                'hits': wrapper.hits,\n                'misses': wrapper.misses\n\n            })\n\n        def cache_clear():\n            \"\"\"Clear the cache and cache statistics\"\"\"\n\n            cache.clear()\n            wrapper.hits = wrapper.misses = 0\n\n        wrapper.hits = wrapper.misses = 0\n        wrapper.cache_info = cache_info\n        wrapper.cache_clear = cache_clear\n\n        return wrapper\n\n    return decorating_function\n\n\n@lru_cache()\ndef main(a, b):\n    return a + b\n\n\nmain(10, 20)\nmain(10, 20)\nmain(30, 40)\nmain.cache_info()\n"}, {"blob_id": "b15b28568d40fe8939ec0933bcfc89178694c2ca", "path": "/homework_class6.py", "content_id": "1f4f6dc19fae54ff6f5c6a96261d72ca12c271ee", "language": "Python", "length_bytes": 3167, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.5795999765396118, "alpha_fraction": 0.5623999834060669, "num_lines": 79, "avg_line_length": 30.64556884765625, "max_line_length": 111, "content": "import re\n# \u0417\u0430\u0434\u0430\u0447\u0430-1\n# \u0418\u0437 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0442 \u0442\u0440\u0435\u0445 \u0434\u043e \u043f\u044f\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432,\n# \u043d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0443\u0434\u0430\u043b\u0435\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0435\u0442\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u0438\u0445 \u0441\u043b\u043e\u0432.\n\n\n# \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0435\u0442\u043d\u044b\u0445 \u0441\u043b\u043e\u0432\ndef task_1_1():\n    with open(\"text_file_1.txt\", \"r\") as file_task1, open(\"text_file_5.txt\", \"w\") as file_result:\n        result = []\n        for i in file_task1:\n            cnt = 0\n            for words in i[:-1].split():\n                if 3 <= len(words.strip()) <= 5:\n                    cnt += 1\n                    if cnt % 2 == 0:\n                        continue\n                result.append(words.strip())\n            file_result.write(' '.join(result)+'\\n')\n            print(result)\n            result.clear()\n\n\ntask_1_1()\n\n\n# \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u043b\u043e\u0432\ndef task_1_2():\n    result = []\n    with open(\"text_file_1.txt\", \"r\") as file_task1, open(\"text_file_5.txt\", \"w\") as file_result:\n        for i in file_task1:\n            cnt = 0\n            for words in i[:-1].split():\n                if 3 <= len(words.strip()) <= 5:\n                    cnt += 1\n            cnt = cnt if cnt % 2 == 0 else cnt - 1\n            for words in i[:-1].split():\n                if 3 <= len(words.strip()) <= 5 and cnt:\n                    cnt -= 1\n                    continue\n                result.append(words.strip())\n            file_result.write(' '.join(result)+'\\n')\n            print(result)\n            result.clear()\n\n\ntask_1_2()\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-2\n# \u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u043e \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430\u0445 \u0438 \u0438\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u0445.\n# \u041f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0444\u0430\u0439\u043b \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u044b \u0442\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0444\u0430\u043c\u0438\u043b\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 \u0431\u0443\u043a\u0432 \u041a \u0438 \u0421.\n\nmy_file = open(\"text_file_2.txt\", \"r\")\nmy_file_result = open(\"text_file_3.txt\", \"w\")\n\n\ndef task_2():\n    data = my_file.readlines()\n    result = list()\n    for line in data:\n        match = re.findall(\"(C\\w+:.+|K\\w+:.+)\", line)\n        result += match\n    string_result = \"\\n\".join(result)\n    return string_result\n\n\nmy_file_result.write(task_2())\nmy_file.close()\nmy_file_result.close()\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-3 - \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u0430 \u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e\n# \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0438\u0435 \u0432 \u0442\u0435\u043b\u0435 \u0432\u0430\u0448\u0435\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n# \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u0430\u0448\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0432\u0438\u0434\n# def my_func():\n#    raise ValueError(\"some text error\")\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-4 - \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u0430 \u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e\n# \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0438\u0435 \u0432 \u0442\u0435\u043b\u0435 \u0432\u0430\u0448\u0435\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n# \u041e\u0448\u0438\u0431\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0430\u0432\u0438\u0442\u044c \u0432\u0430\u0448 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u043c\u0443 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\n"}, {"blob_id": "9dc17dbeb0f0e5f763eec5bd166439ef92e5b74e", "path": "/homework_class7.py", "content_id": "798c7c73c2d69fa64ad8e94f840c71da76e0b444", "language": "Python", "length_bytes": 6638, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.6288896799087524, "alpha_fraction": 0.6057284474372864, "num_lines": 203, "avg_line_length": 26.86206817626953, "max_line_length": 104, "content": "import re\nimport json\nimport os\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-1\n# \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a(list) IP \u0430\u0434\u0440\u0435\u0441\u0441\u043e\u0432. \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c\n# \u043a\u043b\u0430\u0441\u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b:\n# 1) \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a IP \u0430\u0434\u0440\u0435\u0441\u043e\u0432\n# 2) \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a IP \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u043e\u043c \u0432\u0438\u0434\u0435\n# (10.11.12.13 -> 13.12.11.10)\n# 3) \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a IP \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0431\u0435\u0437 \u043f\u0435\u0440\u0432\u044b\u0445 \u043e\u043a\u0442\u0435\u0442\u043e\u0432\n# (10.11.12.13 -> 11.12.13)\n# 4) \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u043a\u0442\u0435\u0442\u043e\u0432 IP \u0430\u0434\u0440\u0435\u0441\u043e\u0432\n# (10.11.12.13 -> 13)\n\n\nclass IpAddress(object):\n\n    def __init__(self, ip_list):\n        self._ip_list = ip_list\n\n    def get_ip(self):\n        return self._ip_list\n\n    def reverse(self):\n        return list(reversed(self._ip_list))\n\n    def without__first_octets(self):\n        temp_str = \", \".join(self._ip_list)\n        match = re.findall(r\"(?:\\d{2}.)(\\d{2}.\\d{2}.\\d{2})\", temp_str)\n        return match\n\n    def only_last_octets(self):\n        temp_str = \", \".join(self._ip_list)\n        match = re.findall(r\"(?:\\d{2}.\\d{2}.\\d{2}.)(\\d{2})\", temp_str)\n        return match\n\n\nip = IpAddress(ip_list=[\"10.11.12.13\", \"77.88.99.11\"])\nprint(\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a IP \u0430\u0434\u0440\u0435\u0441\u043e\u0432: \", ip.get_ip())\nprint(\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a IP \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u043e\u043c \u0432\u0438\u0434\u0435:\", ip.reverse())\nprint(\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a IP \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0431\u0435\u0437 \u043f\u0435\u0440\u0432\u044b\u0445 \u043e\u043a\u0442\u0435\u0442\u043e\u0432: \", ip.without__first_octets())\nprint(\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u043a\u0442\u0435\u0442\u043e\u0432 IP \u0430\u0434\u0440\u0435\u0441\u043e\u0432: \", ip.only_last_octets())\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-2\n# \u0423 \u0432\u0430\u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e JSON \u0444\u0430\u0439\u043b\u043e\u0432. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u044d\u0442\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0435\u0441\u0442\u044c\n# \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c\n# \u043a\u043b\u0430\u0441\u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u044d\u0442\u0438\u043c\u0438 \u0444\u0430\u0439\u043b\u0430\u043c\u0438, \u0430\n# \u0438\u043c\u0435\u043d\u043d\u043e:\n# 1) \u0417\u0430\u043f\u0438\u0441\u044c \u0432 \u0444\u0430\u0439\u043b\n# 2) \u0427\u0442\u0435\u043d\u0438\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430\n# 3) \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u043d\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b\n# 4) \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n# 5) \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n\nclass JsonWork(object):\n\n    def __init__(self, path, path1, path2):\n        self._path = path\n        self._path1 = path1\n        self._path2 = path2\n        self._data = None\n\n    def readfile(self):\n        try:\n            with open(self._path, \"r\") as f:\n                self._data = json.loads(f.read())\n                return self._data\n        except FileNotFoundError as e:\n            print(e)\n\n    def writefile(self):\n        try:\n            with open(self._path2, \"w\") as f1:\n                json.dump(self._data, f1, indent=4)\n        except FileNotFoundError as e:\n            print(e)\n\n    def concatenation(self):\n        try:\n            with open(self._path, \"r\") as f, open(self._path1, \"r\") as f1, open(self._path2, \"w\") as f3:\n                data = json.loads(f.read())\n                data1 = json.loads(f1.read())\n                data_result = dict(data, **data1)\n                json.dump(data_result, f3, indent=4)\n        except FileNotFoundError as e:\n            print(e)\n\n    def absolute(self):\n        return os.path.abspath(self._path)\n\n    def relative(self):\n        return os.path.basename(self._path)\n\n\njs = JsonWork(path=\"json_example.json\", path1=\"json_example_1.json\", path2=\"json_example_w.json\")\nprint(\"\u0427\u0442\u0435\u043d\u0438\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430: \", js.readfile())\nprint(\"\u0417\u0430\u043f\u0438\u0441\u044c \u0432 \u0444\u0430\u0439\u043b, json_example.json\", js.writefile())\nprint(\"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u043d\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b, json_example.json\", js.concatenation())\nprint(\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443: \", js.relative())\nprint(\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443: \", js.absolute())\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-3\n#\n# \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043a\u043b\u0430\u0441\u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f\n# \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u044e\u043d\u0438\u0442\u0443(\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 switch). \u0412 \u0441\u0432\u043e\u0435\u043c\n# \u0441\u043f\u0438\u0441\u043a\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440\n# (unit_name, mac_address, ip_address, login, password).\n# \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0432 \u0432\u0438\u0434\u0435 \u0433\u0435\u0442\u0435\u0440\u043e\u0432 \u0438\n# \u0441\u0435\u0442\u0442\u0435\u0440\u043e\u0432(@property). \u0423 \u0432\u0430\u0441 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\n# \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n\n\nclass Switch(object):\n\n    def __init__(self, unit_name, mac_address, ip_address, login, password):\n        self._unit_name = unit_name\n        self._mac_address = mac_address\n        self._ip_address = ip_address\n        self._login = login\n        self._password = password\n\n# unit_name\n\n    @property\n    def unit_name(self):\n        return self._unit_name\n\n    @unit_name.setter\n    def unit_name(self, new_unit_name):\n        self._unit_name = new_unit_name\n\n    @unit_name.deleter\n    def unit_name(self):\n        del self._unit_name\n\n# mac_address\n\n    @property\n    def mac_address(self):\n        return self._mac_address\n\n    @mac_address.setter\n    def mac_address(self, new_mac_address):\n        self._mac_address = new_mac_address\n\n    @mac_address.deleter\n    def mac_address(self):\n        del self._mac_address\n\n# ip_address\n\n    @property\n    def ip_address(self):\n        return self._ip_address\n\n    @ip_address.setter\n    def ip_address(self, new_ip_address):\n        self._ip_address = new_ip_address\n\n    @ip_address.deleter\n    def ip_address(self):\n        del self._ip_address\n\n# login\n\n    @property\n    def login(self):\n        return self._login\n\n    @login.setter\n    def login(self, new_login):\n        self._login = new_login\n\n    @login.deleter\n    def login(self):\n        del self._login\n\n# password\n\n    @property\n    def password(self):\n        return self._password\n\n    @password.setter\n    def password(self, new_password):\n        self._password = new_password\n\n    @password.deleter\n    def password(self):\n        del self._password\n\n\nsw = Switch(unit_name=\"Asus\", mac_address=\"10.11.12.13\", ip_address=\"15.16.17.18\",\n            login=\"iolshanskiy\", password=\"12345\")\nsw.new_unit_name = \"Utify\"\nsw.new_mac_address = \"10.11.12.13\"\nsw.new_ip_address = \"15.16.17.18\"\nsw.new_login = \"Igor\"\nsw.new_password = \"*****\"\nprint(sw.unit_name, sw.mac_address, sw.ip_address, sw.login, sw.password)\nprint(sw.new_unit_name, sw.new_mac_address, sw.new_ip_address, sw.new_login, sw.new_password)\n"}, {"blob_id": "ea5c967d2927e6d5d6b9702815564a37cd947798", "path": "/homework_class10.py", "content_id": "afc697b8865a96e5170497c8e799f9e82bf1eb49", "language": "Python", "length_bytes": 5756, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.6174033284187317, "alpha_fraction": 0.6134898662567139, "num_lines": 162, "avg_line_length": 25.814815521240234, "max_line_length": 123, "content": "# \u0417\u0430\u0434\u0430\u0447\u0430-1\n# \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0444\u0430\u0439\u043b \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a. \u041d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0432\u0430\u0448\u0435\u0433\u043e \u0444\u0430\u0439\u043b\u0430.\n# \u041f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c.\n# \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u0430, \u0442\u043e\u0433\u0434\u0430 \u0435\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d, \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 - \u0441\u043a\u0438\u043f\u0430\u0435\u043c\n\n\ndef get_all_lines(file_list):\n    lines = []\n    for f in file_list:\n        with open(f) as fd:\n            for line in fd:\n                if line not in lines:\n                    lines.append(line)\n                    yield line.strip()\n\n\nfor line in get_all_lines([\"text_file_1.txt\"]):\n    print(\"Task_1: \", line)\n\n# gen = get_all_lines([\"text_file_1.txt\"])\n# next(gen)\n# next(gen)\n# next(gen)\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-2 (\u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438 \u0435\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e):\n# \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c \u0435\u0441\u0442\u044c \u0444\u0430\u0439\u043b \u0441 \u043b\u043e\u0433\u0430\u043c\u0438, \u0435\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0431\u0435\u0441\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n# \u043d\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440.\n#\n# \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d \u0438\u0437 \u043a\u043e\u0440\u0443\u0442\u0438\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c\u0443 \u0444\u0430\u0439\u043b\u0443\n# \u043f\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443 \u043a\u043e\u043c\u0430\u043d\u0434\u044b tail, \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u0430\u043c\u044b\u0439 \u043a\u043e\u043d\u0435\u0446 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0441 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0438\u0442\u044c\n# \u0437\u0430 \u0435\u0433\u043e \u043d\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c, \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0438c\u0435\u0439, \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c -\n# \u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n#\n# \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u0430\n\n#                    --------\n#                   /- grep -\\\n# dispenser(file) <- - grep - -> pprint\n#                   \\- grep -/\n#                    --------\n\n# \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u0430:\n# ```\n# def coroutine(*args):\n#     # your code here\n#\n#\n# @coroutine\n# def grep(*args):\n# \t# your code here\n#\n#\n# @coroutine\n# def printer():\n# \t# your code here\n#\n#\n# @coroutine\n# def dispenser(*args):\n#     # your code here\n#\n#\n# def follow(*args):\n#     # your code here\n# ```\n#\n# \u041a\u0430\u0436\u0434\u044b\u0439 grep \u0441\u043b\u0435\u0434\u0438\u0442 \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u043e\u0439\n#\n# \u041a\u0430\u043a \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c:\n#\n# ```\n# f_open = open('log.txt') # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0444\u0430\u0439\u043b\u0443\n# follow(f_open,\n#        # \u0434\u0435\u043b\u0435\u0433\u0438\u0440\u0443\u0435\u043c \u0438\u0432\u0435\u043d\u0442\u044b\n#        dispenser([\n#            grep('python', printer()), # \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\n#            grep('is', printer()),     # \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0435\n#            grep('great', printer()),  # \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b\n#        ])\n#        )\n# ```\n# \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0444\u0430\u0439\u043b \u0437\u0430\u043f\u0438\u0448\u0435\u0442\u0441\u044f \u0447\u0442\u043e-\u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 ('python', 'is', 'great') \u043c\u044b \u0441\u043c\u043e\u0436\u0435\u043c \u044d\u0442\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c\n#\n# \u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0431\u0443\u0434\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c \u0438\u0432\u0435\u043d\u0442 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u043e\u043c, \u0441 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435\u043c \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.\n#\n# \u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u043f\u043b\u043e\u0445\u043e - \u043f\u043b\u0430\u043d \u0411 \u043b\u0435\u043a\u0446\u0438\u044f \u0414\u044d\u0432\u0438\u0434\u0430 \u0411\u0438\u0437\u043b\u0438\n# [warning] \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0442\u0430\u043c \u0442\u043e\u0436\u0435 \u0435\u0441\u0442\u044c :)\n# https://www.dabeaz.com/coroutines/Coroutines.pdf\n\n\nimport time\n\n\ndef coroutine(func):\n    def generator(*args, **kwargs):\n        primed_func = func(*args, **kwargs)\n        primed_func.__next__()\n        return primed_func\n    return generator\n\n\ndef follow(file, target):\n    file.seek(0, 2)\n    try:\n        while True:\n            line = file.readline()\n            if not line:\n                time.sleep(0.1)\n                continue\n            target.send(line)\n    except StopIteration:\n        print(\"Pipeline Ended\")\n\n\n@coroutine\ndef grep(pattern, target):\n    while True:\n        line = (yield)\n        if pattern in line:\n            target.send(line)\n\n\n@coroutine\ndef printer():\n    try:\n        while True:\n            line = (yield)\n            print(\"Task_2 \", line.strip())\n    except GeneratorExit:\n        print(\"Printer Pipeline Ended\")\n\n\n@coroutine\ndef dispenser(targets):\n    while True:\n        item = (yield)\n        for target in targets:\n            target.send(item)\n\n\nif __name__ == '__main__':\n    with open(\"text_file_1.txt\", \"r\") as f:\n        follow(f, dispenser([grep('python',printer()),\n                            grep('is',printer()),\n                            grep('great',printer())])\n                )\n\n\n\n\n#\u0417\u0430\u0434\u0430\u0447\u0430-3 (\u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u0435\u0433\u043e \u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 2 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430\u0441\u044c \u0441\u043b\u043e\u0436\u043d\u043e\u0439)\n# \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c pipeline (\u043a\u043e\u043d\u0432\u0435\u0435\u0440, \u043f\u043e\u0434\u043e\u0431\u0438\u0435 pipeline \u0432 unix https://en.wikipedia.org/wiki/Pipeline_(Unix)).\n#\n# \u0421\u0445\u0435\u043c\u0430 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u0430 :\n# source ---send()--->coroutine1------send()---->coroutine2----send()------>sink\n#\n# \u0412\u0441\u0435 \u0447\u0442\u043e \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c \u0447\u0442\u043e \u0431\u044b\u043b\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043e\u0448\u0438\u0431\u043a\u0438 GeneratorExit.\n#\n# \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \u0412\u0430\u0448 source (\u044d\u0442\u043e \u043d\u0435 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0430, \u043d\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0438 \u043f\u0440\u043e\u0447\u0435\u0435, \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f ) \u0432 \u043d\u0435\u0439 \u043e\u043f\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0446\u0438\u043a\u043b \u0438\u0437 10 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n# \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u043e \u0446\u0435\u043f\u043e\u0447\u043a\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0440\u0443\u0442\u0438\u043d \u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u043a\u043e\u0440\u0443\u0442\u0438\u0432 \u0432\u044b\u0437\u0432\u0430\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0435.\n# \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u0437\u043e\u0432\u0430 .close() \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u043a\u043e\u0440\u0443\u0442\u0438\u043d \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0447\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430.\n"}, {"blob_id": "4e8e608a7524d58063e12af24bc86e1e3a1f8a52", "path": "/homework_class8.py", "content_id": "b6861d6e93eafb55648e6d74a2c31855d01e9576", "language": "Python", "length_bytes": 3830, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.5686891674995422, "alpha_fraction": 0.5609616637229919, "num_lines": 179, "avg_line_length": 18.51955223083496, "max_line_length": 99, "content": "import contextlib\nimport os\nimport time\n\n# class suppress(object):\n#\n#     def __init__(self, suppressed):\n#\n#         self.suppressed = suppressed\n#\n#     def __enter__(self):\n#\n#         pass\n#\n#     def __exit__(self, exc_type, exc_val, exc_tb):\n#\n#         return exc_type is not None and issubclass(exc_type, self.suppressed)\n#\n#\n# with suppress(KeyError):\n#\n#     raise KeyError\n#\n# #################\n#\n# import contextlib\n#\n#\n#\n# @contextlib.contextmanager\n#\n# def context():\n#\n#     print('enter to our block')\n#\n#     try:\n#\n#         yield {}\n#\n#     except RuntimeError as e:\n#\n#         print(\"error: {}\".format(e))\n#\n#     finally:\n#\n#         print(\"out of block\")\n#\n#\n#\n#\n#\n# with context() as fp:\n#\n#     print(\"do_something\")\n#\n#\n# class cd:\n#\n#     def __init__(self, path):\n#\n#         self.path = path\n#\n#         self.saved_cwd = None\n#\n#     def __enter__(self):\n#\n#         self.saved_cwd = os.getcwd()\n#\n#         os.chdir(self.path)\n#\n#     def __exit__(self, *exc_info):\n#\n#         os.chdir(self.saved_cwd)\n#\n#\n# print(\"CURR_DIR = {}\".format(os.getcwd()))\n#\n# with cd(\"F:\\Education\"):\n#\n#     print(\"CHDIR = {}\".format(os.getcwd()))\n#\n# print(\"CURR_DIR = {}\".format(os.getcwd()))\n#\n# ##########################################################\n#\n# class Hello:\n#\n#     def __enter__(self):\n#\n#         print('enter to our block')\n#\n#         return 1\n#\n#\n#\n#     def __exit__(self, exp_type, exp_value, traceback):\n#\n#         print(\"out of block\")\n#\n#\n# with Hello() as s:\n#\n#     print(s)\n#\n#     print(\"something\")\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-1\n# \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043e\u043d \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434.\n# \u0422\u0430\u043a \u0436\u0435 \u0432\u0430\u0448 \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0430\u0432\u043b\u044f\u0442\u044c.\n# \u0415\u0441\u043b\u0438 \u0444\u043b\u0430\u0433 \u043e\u0431 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u043e\u0434\u043d\u044f\u0442\u043e.\n\nclass MyException(Exception):\n    pass\n\n\nclass cd(object):\n\n    def __init__(self, path, flag_ex, exception):\n        self.path = path\n        self.flag_ex = flag_ex\n        self.exception = exception\n        self.saved_cwd = None\n\n    def __enter__(self):\n        if self.flag_ex and self.exception is not None:\n            print(\"Task_1: Error suppressed\")\n            self.saved_cwd = os.getcwd()\n            os.chdir(self.path)\n        else:\n            raise self.exception\n\n    def __exit__(self, *args):\n        os.chdir(self.saved_cwd)\n\n\nwith cd(path=\"F:\\\\\", flag_ex=True, exception=MyException):\n    print(\"Task_1: CHDIR = {}\".format(os.getcwd()))\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430 -2\n# \u041e\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0432\u044b\u0448\u0435 \u043d\u043e \u0443\u0436\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c @contexmanager\n\n@contextlib.contextmanager\ndef context(path, flag_ex, exception):\n    print(\"Task_2_step1: CURDIR = {}\".format(os.getcwd()))\n    if flag_ex and exception is not None:\n        print(\"Task_2_step2: Error suppressed\")\n        os.chdir(path)\n    else:\n        raise exception\n    try:\n        yield {}\n    except RuntimeError as e:\n        print(\"Task_2_step1_1: error: {}\".format(e))\n    finally:\n        print(\"Task_2_step2: CHRDIR = {}\".format(os.getcwd()))\n\n\nwith context(\"F:\\\\\", True, MyException) as fp:\n    pass\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430 -3\n# \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043d\u0438\u044f \u0431\u043b\u043e\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439\n\nclass Task_3(object):\n\n    def __enter__(self):\n        self.time_start = time.time()\n\n    def __exit__(self, exp_type, exp_value, traceback):\n        time_finish = time.time()\n        result = time_finish - self.time_start\n        return print(\"Task_3: \", result)\n\n\nwith Task_3() as h:\n    list_time = [x * 2 for x in range(10000000)]\n"}, {"blob_id": "1077cc52c530b60f031b4e75f4288da2cbc8e66a", "path": "/homework_class9.py", "content_id": "964b37ba4188f9c3154186a8de5b3347730a6f3c", "language": "Python", "length_bytes": 2139, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.6340289115905762, "alpha_fraction": 0.6276083588600159, "num_lines": 89, "avg_line_length": 19.9887638092041, "max_line_length": 81, "content": "\nimport re\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-1\n# \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u0430 email.\n# \u0412\u0430\u0448 \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0444\u043e\u0440\u043c\u0430\u0442 email \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b \u043f\u044b\u0442\u0430\u0435\u0442\u0435\u0441\u044c \u043d\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u044c\n\n\nclass EmailDescriptor:\n    def __get__(self, instance, owner):\n        pass\n\n    def __set__(self, instance, value):\n        if re.findall(r\"(\\w+@\\w+\\.\\w+)\", value):\n            self.value = value\n        else:\n            raise RuntimeError(\"Incorrect email format: {}\".format(value))\n        print(\"Task_1 valid email format:\", value)\n\n\nclass MyClass:\n    email = EmailDescriptor()\n\n\nmy_class = MyClass()\nmy_class.email = \"validemail@gmail.com\"\n# my_class.email = \"novalidemail\" # Raised Exception\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-2\n# \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0438\u043d\u0433\u043b\u0442\u043e\u043d \u043c\u0435\u0442\u0430\u043a\u043b\u0430\u0441\u0441(\u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0441\u0438\u043d\u0433\u043b\u0442\u043e\u043d\u043e\u0432).\n\nclass Singleton(type):\n    _instances = {}\n\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\n\nclass MyClass(metaclass=Singleton):\n    pass\n\n\nclass NotClass():\n    pass\n\n\nc = MyClass()\nb = MyClass()\nassert id(c) == id(b)\nprint(\"Task_2: \", c == b)\n\nx = NotClass()\ny = NotClass()\nprint(\"Task_2: \", x == y)\n\n\n# \u0417\u0430\u0434\u0430\u0447\u0430-3\n# \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440 IngegerField(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435\n# \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0433\u0434\u0435 \u043e\u043d \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\n\nclass IngegerField:\n\n    def __get__(self, instance, owner):\n        return instance._number\n        #return self.value\n\n    def __set__(self, instance, value):\n        instance._number = value\n        #self.value = value\n\n\nclass Data:\n    number = IngegerField()\n\n    # def __init__(self):\n    #     self.number = IngegerField()\n\n\ndata_row = Data()\nnew_data_row = Data()\n\ndata_row.number = 5\nnew_data_row.number = 10\n\nprint(\"Task_3: \", data_row.number)\nprint(\"Task_3: \", new_data_row.number)\nprint(\"Task_3: \", data_row.number != new_data_row.number)\n"}, {"blob_id": "7bbb0d44e6fc7acdcb9af34eb73b68554c336326", "path": "/class2.py", "content_id": "28c1fce4b9c233d11db7ab3ff3e7104454e81f90", "language": "Python", "length_bytes": 840, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.6748466491699219, "alpha_fraction": 0.6533742547035217, "num_lines": 24, "avg_line_length": 26.16666603088379, "max_line_length": 115, "content": "# \u0415\u0441\u043b\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434\u0435. \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 list of dicts\n# \u041d\u0430\u0439\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0434\u043e\u0440\u043e\u0433\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432,\n# \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0435, \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0442\u043e\u0432\u0430\u0440\u0430\u043c \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b \u0432\u0442\u043e\u0440\u044b\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c.\n\ndata_list = [\n    {\"name\": \"pen\", \"price\": 5},\n    {\"name\": \"whiteboard\", \"price\": 2200},\n    {\"name\": \"whiteboard\", \"price\": 170}]\n\n\ndef bigger_price(limit, data):\n    data.sort(key=lambda k: k[\"price\"], reverse=True)\n    return data[:limit]\n\n\nprint(\"result: \", bigger_price(2, data_list))\n\n\ndef number_diff(*args):\n    args = (22, 33)\n    return max(args) - min(args) if args else 0\n\n\nprint(number_diff())\n"}, {"blob_id": "d583f9d93d99cc9c7c707782f5b4e0d6273cf618", "path": "/class4.py", "content_id": "92c8832e2ac9447a063d121d4cf646a435cd2dfb", "language": "Python", "length_bytes": 1614, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.7425552606582642, "alpha_fraction": 0.739673376083374, "num_lines": 35, "avg_line_length": 28.742856979370117, "max_line_length": 116, "content": "# LRU (least recently used) \u2014 \u044d\u0442\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u044b\u0442\u0435\u0441\u043d\u044f\u044e\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0435 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u043b\u0438\u0441\u044c.\n# \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e. \u0418 \u043a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n# \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 N \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0442\u0435\u0441\u043d\u0438\u0442\u044c \u0438\u0437 \u043a\u0435\u0448\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0435 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u043b\u043e\u0441\u044c.\n#\n#\n# \u0417\u0430\u0434\u0430\u0447\u0430 - 1\n# \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 lru_cache(\u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0439 \u0442\u043e\u043c\u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0432 Python).\n#\n# \u0417\u0430\u0434\u0430\u0447\u0430-2\n# \u0412\u0430\u0448 lru_cache \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434\n# cache_info  - \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u043a\u0435\u0448\u0430(\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u043b\u0430\u0441\u044c \u0432\u0430\u0448\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f,\n# \u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u044b\u043b\u043e \u0432\u0437\u044f\u0442\u043e \u0438\u0437 \u043a\u0435\u0448\u0430, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0441\u0442\u0430 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e \u0432 \u043a\u0435\u0448\u0435)\n#\n# \u0417\u0430\u0434\u0430\u0447\u0430-3\n# \u0412\u0430\u0448 lru_cache \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434\n# cache_clear - \u043e\u0447\u0438\u0449\u0430\u0435\u0442 \u043a\u0435\u0448\n#\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u043c\u0443 \u043c\u0435\u0442\u043e\u0434\u0443 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430\n\ndef decorator(my_func):\n     def wrapper():\n           my_func()\n\n     def cache_clear():\n           pass\n\n     wrapper.cache_clear = cache_clear\n     return wrapper\n\n@decorator\ndef my_func():\n      pass\n\n\nmy_func.cache_clear()\n"}, {"blob_id": "38ec98a316e4f5ab15a698e7c0d20baabca8286c", "path": "/class3.py", "content_id": "fe2897f678522ac949f8430f4c6141cc831d5d88", "language": "Python", "length_bytes": 1779, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.701886773109436, "alpha_fraction": 0.6920754909515381, "num_lines": 55, "avg_line_length": 23.090909957885742, "max_line_length": 102, "content": "from functools import singledispatch\nfrom timeit import default_timer as timer\n\n\n# \u041f\u0420\u0410\u041a\u0422\u0418\u041a\u0410 \u0414\u0415\u041a\u041e\u0420\u0410\u0422\u041e\u0420\u042b:\n#\n# *\u0417\u0430\u0434\u0430\u0447\u0430-1*\n# \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n#\n# *\u0417\u0430\u0434\u0430\u0447\u0430-2*\n# \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0430\u0448\u0435\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n#\n# *\u0417\u0430\u0434\u0430\u0447\u0430-3*\n# \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c(\u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c) \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a \u0432\u0430\u0448\u0435\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n\n\ndef decorator(random_func):\n    def wraps(*args):\n        start = timer()\n        print(\"\u042f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\")\n        random_func(*args)\n        random_func.x = 1\n        print(random_func.__dict__)\n        end = timer()\n        print(\"Time taken:\", end - start)\n\n    return wraps\n\n\n@decorator\ndef random_func():\n    list_time = [x * 2 for x in range(1000000)]\n    return list_time, print(\"\u0444\u0443\u043d\u043a\u0446\u0438\u044f\")\n\n\nprint(random_func())\n\n\n# *\u0417\u0430\u0434\u0430\u0447\u0430 -4*\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u0440\u0435\u0434\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0442\u0438\u043f\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\n# \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u0432\u0430\u0448\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e. \u0415\u0441\u043b\u0438 \u044d\u0442\u043e int, \u0442\u043e\u0433\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442,\n# \u0435\u0441\u043b\u0438 \u044d\u0442\u043e str(), \u0442\u043e\u0433\u0434\u0430 \u0437\u0430\u0440\u0435\u0439\u0437\u0438\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443 ValueError (raise ValueError(\u201cstring type is not supported\u201d))\n\n\n@singledispatch\ndef new_func(x):\n    print(\"\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0443 \u0442\u0435\u0431\u044f int\", x)\n    return\n\n\n@new_func.register(str)\ndef accept_func(x):\n    print(\"raise ValueError('A very specific bad thing happened.')\")\n\n\nnew_func(\"string\")\n"}, {"blob_id": "fef4746e7018bc8de873ffd18fb4cef4ca5702f4", "path": "/homework_class4.py", "content_id": "ba78f3b09bdd62075eeea9b9f81cc4a0f99f5996", "language": "Python", "length_bytes": 4256, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.6114785075187683, "alpha_fraction": 0.5505432486534119, "num_lines": 130, "avg_line_length": 31.561538696289062, "max_line_length": 120, "content": "# TASK-1\n# Write a function:\n# def solution(A)\n# that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.\n# For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5.\n# Given A = [1, 2, 3], the function should return 4.\n# Given A = [\u22121, \u22123], the function should return 1.\n# Assume that:\n# N is an integer within the range [1..100,000];\n# each element of array A is an integer within the range [\u22121,000,000..1,000,000].\n\n\ndef task_1(a_tup):\n    a_sort = sorted(a_tup)\n    highest = None\n    for i in range(len(a_sort) - 1):\n        if a_sort[i] < 0:\n            continue\n        if a_sort[i+1] - a_sort[i] > 1:\n            highest = a_sort[i]\n            break\n    if not highest:\n        highest = 0\n    if highest < 0:\n        highest = 0\n    if highest > 0:\n        return highest + 1\n\n\nprint(\"task_1: \", task_1([-3, -1, 1, 3]))\n\n\ndef task_1_1():\n    a_tup = [-3, -1, 1, 3]\n    for i in range(1, len(a_tup) + 2):\n        if i not in a_tup:\n            return i\n\n\nprint(\"task_1_1: \", task_1_1())\n\n# ==========================\n# TASK-2\n# A\u00a0binary gap\u00a0within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones\n# at both ends in the binary representation of N.\n# For example, number 9 has binary representation\u00a01001\u00a0and contains a binary gap of length 2.\n# The number 529 has binary representation\u00a01000010001\u00a0and contains two binary gaps: one of length 4 and one of length 3.\n# The number 20 has binary representation\u00a010100\u00a0and contains one binary gap of length 1.\n# The number 15 has binary representation\u00a01111\u00a0and has no binary gaps.\n# The number 32 has binary representation\u00a0100000\u00a0and has no binary gaps.\n#\n# Write a function:\n#\n# def solution(N)\n#\n# that, given a positive integer N, returns the length of its longest binary gap.\n# The function should return 0 if N doesn't contain a binary gap.\n#\n# For example, given N = 1041 the function should return 5, because N has binary representation\u00a010000010001\u00a0\n# and so its longest binary gap is of length 5. Given N = 32 the function should return 0,\n# because N has binary representation '100000' and thus no binary gaps.\n# Assume that:\n# N is an integer within the range [1..2,147,483,647].\n# ============================\n\n\ndef task_2(num):\n    bin_str = str(bin(num))[2:]\n    bin_gap = False\n    bin_max = 0\n    bin_cnt = 0\n    for i in bin_str:\n        if i == '1':\n            if bin_max < bin_cnt:\n                bin_max = bin_cnt\n            bin_gap = True\n            bin_cnt = 0\n        elif bin_gap:\n            bin_cnt += 1\n    return bin_max\n\n\nprint(\"task_2: \", task_2(529))\n\n\ndef task_2_2(num):\n    formatted_n = '{0:b}'.format(num)\n    split_formatted_n = formatted_n.split('1')\n    return len(max(split_formatted_n, key=len))\n\n\nprint(\"task_2_2: \", task_2(529))\n\n# TASK-3\n# An array A consisting of N integers is given. Rotation of the array means that each element is shifted right by one\n# index, and the last element of the array is moved to the first place. For example, the rotation\n# of array A = [3, 8, 9, 7, 6] is [6, 3, 8, 9, 7] (elements are shifted right by one index and 6 is moved to the\n# first place).\n# The goal is to rotate array A K times; that is, each element of A will be shifted to the right K times.\n# Write a function:\n# def solution(A, K)\n# that, given an array A consisting of N integers and an integer K, returns the array A rotated K times.\n# For example, given\n#     A = [3, 8, 9, 7, 6]\n#     K = 3\n# the function should return [9, 7, 6, 3, 8]. Three rotations were made:\n#     [3, 8, 9, 7, 6] -> [6, 3, 8, 9, 7]\n#     [6, 3, 8, 9, 7] -> [7, 6, 3, 8, 9]\n#     [7, 6, 3, 8, 9] -> [9, 7, 6, 3, 8]\n# For another example, given\n#     A = [0, 0, 0]\n#     K = 1\n# the function should return [0, 0, 0]\n# Given\n#     A = [1, 2, 3, 4]\n#     K = 4\n# the function should return [1, 2, 3, 4]\n# Assume that:\n# N and K are integers within the range [0..100];\n# each element of array A is an integer within the range [\u22121,000..1,000].\n\n\ndef task_3(a_tup, k_shift):\n    if len(a_tup) == 0:\n        return a_tup\n        k_shift = k_shift % len(a_tup)\n    return a_tup[-k_shift:] + a_tup[:-k_shift]\n\n\nprint(\"task_3: \", task_3([1, 2, 3], 1))\n\n"}], "num_files": 13}
{"repo_name": "minpkangLSM/coastguard", "repo_url": "https://github.com/minpkangLSM/coastguard", "gha_language": "Python", "files": [{"blob_id": "e9151617042cf298f130b60f28a9e6527b8cb425", "path": "/preprocess.py", "content_id": "9fbf5f4141eca39eaa1bad87f1b86f0c2e1c1724", "language": "Python", "length_bytes": 16837, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.44882315397262573, "alpha_fraction": 0.41127148270606995, "num_lines": 358, "avg_line_length": 45.63966369628906, "max_line_length": 141, "content": "import os\nimport pytesseract\nimport math\nimport csv\nimport re\nimport cv2\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\n\nclass meta_info :\n\n    @staticmethod\n    def frame_classifier(img_dir, avg_threshold=1.5, std_threshold=0.5):\n\n        frame = cv2.imread(img_dir, cv2.COLOR_RGB2BGR)\n        frame_parts = frame[26:666, :, :]\n\n        # # intensity\n        # intensity = np.mean(frame_parts)\n\n        # statistics\n        b_avg = np.mean(frame_parts[:, :, 0])\n        g_avg = np.mean(frame_parts[:, :, 1])\n        r_avg = np.mean(frame_parts[:, :, 2])\n        avg_std = np.std([b_avg, g_avg, r_avg])\n\n        b_std = np.std(frame_parts[:, :, 0])\n        g_std = np.std(frame_parts[:, :, 1])\n        r_std = np.std(frame_parts[:, :, 2])\n        std_std = np.std([b_std, g_std, r_std])\n\n        if avg_std < avg_threshold:\n\n            if std_std < std_threshold: img = \"THR\"\n            else: img = \"RGB\"\n\n        else: img = \"RGB\"\n\n        return img\n\n    def geo_info(self,\n                 frame_folder_dir,\n                 ) :\n\n        # frame meta dict\n        frame_meta_list = []\n        meta_list = [\"name\", \"Tlat\", \"Tlon\", \"Rng\", \"Alat\", \"Alon\", \"Az\", \"El\", \"Date\", \"Time\", \"img\"]\n\n        # frame folder dir generation\n        frame_nm_list = os.listdir(frame_folder_dir)\n        for frame_nm in tqdm(frame_nm_list) :\n\n            frame_dir = os.path.join(frame_folder_dir, frame_nm)\n            img = meta_info.frame_classifier(img_dir=frame_dir)\n\n            frame = cv2.imread(frame_dir, cv2.IMREAD_GRAYSCALE)\n            # frame = np.array(Image.open(frame_dir))\n\n            # cv2 : order of coordinates = [y, x]\n            Tlat = frame[668:690, 118:251]\n            Tlon = frame[668:690, 331:468]\n            Rng = frame[668:690, 537:958]\n            Alat = frame[697:716, 75:215]\n            Alon = frame[697:716, 341:488]\n            Az = frame[697:716, 770:845]\n            El = frame[697:716, 918:989]\n            Date = frame[697:716, 1010:1160]\n            Time = frame[697:716, 1160:1277]\n\n            # save meta info of a frame in dict type\n            frame_dict = {}\n            frame_dict[meta_list[0]] = frame_nm\n            frame_dict[meta_list[10]] = img\n\n            frame_dict[meta_list[1]] = pytesseract.image_to_string(Tlat, lang=None, config='--psm 8')\n            if frame_dict[meta_list[1]] == \"\f\" :\n                frame_dict[meta_list[1]] = \"None\"\n                print(\"Tlat None\")\n\n            frame_dict[meta_list[2]] = pytesseract.image_to_string(Tlon, lang=None, config='--psm 8')\n            if frame_dict[meta_list[2]] == \"\f\" :\n                frame_dict[meta_list[2]] = \"None\"\n                print(\"Tlon None\")\n\n            frame_dict[meta_list[3]] = pytesseract.image_to_string(Rng, lang=None, config='--psm 8')\n            if frame_dict[meta_list[3]] == \"\f\" :\n                frame_dict[meta_list[3]] = \"None\"\n                print(\"Rng None\")\n\n            frame_dict[meta_list[4]] = pytesseract.image_to_string(Alat, lang=None, config='--psm 8')\n            if frame_dict[meta_list[4]] == \"\f\" :\n                frame_dict[meta_list[4]] = \"None\"\n                print(\"Alat None\")\n\n            frame_dict[meta_list[5]] = pytesseract.image_to_string(Alon, lang=None, config='--psm 8')\n            if frame_dict[meta_list[5]] == \"\f\" :\n                frame_dict[meta_list[5]] = \"None\"\n                print(\"Alon None\")\n\n            frame_dict[meta_list[6]] = pytesseract.image_to_string(Az, lang=None, config='--psm 8')\n            if frame_dict[meta_list[6]] == \"\f\" :\n                frame_dict[meta_list[6]] = \"None\"\n                print(\"Az None\")\n\n            frame_dict[meta_list[7]] = pytesseract.image_to_string(El, lang=None, config='--psm 8')\n            if frame_dict[meta_list[7]] == \"\f\" :\n                frame_dict[meta_list[7]] = \"None\"\n                print(\"El None\")\n\n            frame_dict[meta_list[8]] = pytesseract.image_to_string(Date, lang=None, config='--psm 8')\n            if frame_dict[meta_list[8]] == \"\f\" :\n                frame_dict[meta_list[8]] = \"None\"\n                print(\"Date None\")\n\n            frame_dict[meta_list[9]] = pytesseract.image_to_string(Time, lang=None, config='--psm 8')\n            if frame_dict[meta_list[9]] == \"\f\" :\n                frame_dict[meta_list[9]] = \"None\"\n                print(\"Time None\")\n\n            frame_meta_list.append(frame_dict)\n\n        # dict to csv format file\n        with open(\"E:\\\\2021_coastguard\\\\frame\\\\D\\\\extract_geoinfo_with_img.csv\", \"w\", encoding='UTF-8', newline='', ) as f:\n            writer = csv.DictWriter(f, fieldnames=meta_list)\n            writer.writeheader()\n            for data in frame_meta_list:\n                writer.writerow(data)\n\n        return frame_meta_list\n\n    def interpolation(self,\n                      input,\n                      output,\n                      interpolation=False):\n\n        # input\n        f = open(input, 'r', encoding='UTF-8', newline=\"\")\n        f = csv.reader(f)\n\n        # pattern reg\n        Loc_p = re.compile('(\\d{1,3})(\\D+)(\\d{1,3})(\\D+)(\\d{1,3})')  # Tlat, Tlon, ALat, Alon, Az, El\n        Pos_p = re.compile('([+-]?\\d{1,2})(\\D+)(\\d{1,2})')  # Az, El\n        Date_p = re.compile('(\\d{2})-([a-zA-Z]{3})-(\\d{4})')  # Date\n        Time_p = re.compile(\"(\\d{2}):(\\d{2}):(\\d{2})\")  # Time\n\n        # geo-data\n        meta_list = [\"name\", \"Tlat\", \"Tlon\", \"Rng\", \"Alat\", \"Alon\", \"Az\", \"El\", \"Date\", \"Time\", \"Img\"]\n        interpolated_meta = [] # \ucd5c\uc885\uacb0\uacfc\uac12 (str \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ub41c \uac12 - \uc5f0\uc0b0\uc774 \ubd88\uac00\ub2a5\ud55c \ud615\ud0dc\ub77c\uace0 \uac00\uc815)\n        temp_meta = [] # \uc5f0\uc0b0\uc774 \uac00\ub2a5\ud55c \ud615\ud0dc(\ud29c\ud50c)\ub85c \uc800\uc7a5\ub41c \uac12\n\n        for idx, line in enumerate(f) :\n            re_frame_dict = {} # \ud604\uc7ac decoding\ud558\uace0 \uc788\ub294 \uac12\n            if idx == 0 : continue # \ub9e8 \ucc98\uc74c \uc5f4\uc740 \uc5f4 \ubcc4 \uc774\ub984\uc774\ubbc0\ub85c \ud328\uc2a4\n\n            Tlat_re = re.findall(Loc_p, line[1])\n            if Tlat_re != []: Tlat = str(Tlat_re[0][0])+'\u00b0'+str(Tlat_re[0][2])+\".\"+str(Tlat_re[0][4])+\"'\"\n            else : Tlat = None # No fitted in the shape of re, considering Error : None\n            Tlon_re = re.findall(Loc_p, line[2])\n            if Tlon_re != []: Tlon = str(Tlon_re[0][0])+'\u00b0'+str(Tlon_re[0][2])+\".\"+str(Tlon_re[0][4])+\"'\"\n            else : Tlon = None\n            Alat_re = re.findall(Loc_p, line[4])\n            if Alat_re != []: Alat = str(Alat_re[0][0])+'\u00b0'+ str(Alat_re[0][2])+\".\"+str(Alat_re[0][4])+\"'\"\n            else : Alat = None\n            Alon_re = re.findall(Loc_p, line[5])\n            if Alon_re != []: Alon = str(Alon_re[0][0])+'\u00b0'+str(Alon_re[0][2] +\".\"+str(Alon_re[0][4]))+\"'\"\n            else : Alon = None\n            Az_re = re.findall(Pos_p, line[6])\n            if Az_re != []: Az = str(Az_re[0][0]) + \".\" + str(Az_re[0][2]) + '\u00b0'\n            else : Az = None\n            El_re = re.findall(Pos_p, line[7])\n            if El_re != []: El = str(El_re[0][0]) + \".\" + str(El_re[0][2]) + '\u00b0'\n            else : El = None\n            Date_re = re.findall(Date_p, line[8])\n            if Date_re != [] : Date = str(Date_re[0][0])+\"-\"+str(Date_re[0][1])+\"-\"+str(Date_re[0][2])\n            else : Date = None\n            Time_re = re.findall(Time_p, line[9])\n            if Time_re != [] : Time = str(Time_re[0][0])+\":\"+str(Time_re[0][1])+\":\"+str(Time_re[0][2])\n            else : Time = None\n            temp_meta.append([line[0], Tlat_re, Tlon_re, line[3], Alat_re, Alon_re, Az_re, El_re, Date_re, Time_re])\n        print(temp_meta)\n        interval = np.zeros((10))\n        for idx in range(len(temp_meta)):\n            # Tlat\n            if temp_meta[idx][1] == [] and interval[1] == 0:\n                interval[1] += 1\n                Tlat_head = idx\n            elif temp_meta[idx][1] == [] and interval[1] != 0:\n                interval[1] += 1\n            elif temp_meta[idx][1] != [] and interval[1] != 0:\n                front = float(temp_meta[Tlat_head-1][1][0][0])+float(temp_meta[Tlat_head-1][1][0][2]+\".\"+temp_meta[Tlat_head-1][1][0][4])/60.\n                rear = float(temp_meta[idx][1][0][0])+float(temp_meta[idx][1][0][2]+\".\"+temp_meta[idx][1][0][4])/60.\n                gap = rear - front\n                interval_gap = gap / interval[1]\n                for i in range(int(interval[1])) :\n                    value = front+interval_gap*(i+1)\n                    first = math.floor(value)\n                    second = math.floor((value-first)*60)\n                    third = math.floor(((value-first)*60-second)*100)\n                    Tlat = [(str(first), '\u00b0', str(second), '.', str(third))]\n                    temp_meta[Tlat_head+i][1] = Tlat\n                interval[1] = 0\n\n            # Tlon\n            if temp_meta[idx][2] == [] and interval[2] == 0:\n                interval[2] += 1\n                Tlon_head = idx\n            elif temp_meta[idx][2] == [] and interval[2] != 0:\n                interval[2] += 1\n            elif temp_meta[idx][2] != [] and interval[2] != 0:\n                front = float(temp_meta[Tlon_head - 1][2][0][0]) + \\\n                        float(temp_meta[Tlon_head - 1][2][0][2] + \".\" + temp_meta[Tlon_head - 1][2][0][4]) / 60.\n                rear = float(temp_meta[idx][2][0][0]) + \\\n                       float(temp_meta[idx][2][0][2] + \".\" + temp_meta[idx][2][0][4]) / 60.\n                gap = rear - front\n                interval_gap = gap / interval[2]\n                for i in range(int(interval[2])):\n                    value = front + interval_gap * (i + 1)\n                    first = math.floor(value)\n                    second = math.floor((value - first) * 60)\n                    third = math.floor(((value - first) * 60 - second) * 100)\n                    Tlat = [(str(first), '\u00b0', str(second), '.', str(third))]\n                    temp_meta[Tlon_head + i][2] = Tlat\n                interval[2] = 0\n\n            # Alon\n            if temp_meta[idx][4] == [] and interval[4] == 0:\n                interval[4] += 1\n                Alon_head = idx\n            elif temp_meta[idx][4] == [] and interval[4] != 0:\n                interval[4] += 1\n            elif temp_meta[idx][4] != [] and interval[4] != 0:\n                front = float(temp_meta[Tlon_head - 1][4][0][0]) + \\\n                        float(temp_meta[Tlon_head - 1][4][0][2] + \".\" + temp_meta[Tlon_head - 1][4][0][4]) / 60.\n                rear = float(temp_meta[idx][4][0][0]) + \\\n                        float(temp_meta[idx][4][0][2] + \".\" + temp_meta[idx][4][0][4]) / 60.\n                gap = rear - front\n                interval_gap = gap / interval[4]\n                for i in range(int(interval[4])):\n                    value = front + interval_gap * (i + 1)\n                    first = math.floor(value)\n                    second = math.floor((value - first) * 60)\n                    third = math.floor(((value - first) * 60 - second) * 100)\n                    Alon = [(str(first), '\u00b0', str(second), '.', str(third))]\n                    temp_meta[Alon_head + i][4] = Alon\n                interval[4] = 0\n\n            # Alat\n            if temp_meta[idx][5] == [] and interval[5] == 0:\n                interval[5] += 1\n                Alat_head = idx\n            elif temp_meta[idx][5] == [] and interval[5] != 0:\n                interval[5] += 1\n            elif temp_meta[idx][5] != [] and interval[5] != 0:\n                front = float(temp_meta[Tlon_head - 1][5][0][0]) + \\\n                        float(temp_meta[Tlon_head - 1][5][0][2] + \".\" + temp_meta[Tlon_head - 1][5][0][4]) / 60.\n                rear = float(temp_meta[idx][5][0][0]) + \\\n                        float(temp_meta[idx][5][0][2] + \".\" + temp_meta[idx][5][0][4]) / 60.\n                gap = rear - front\n                interval_gap = gap / interval[5]\n                for i in range(int(interval[5])):\n                    value = front + interval_gap * (i + 1)\n                    first = math.floor(value)\n                    second = math.floor((value - first) * 60)\n                    third = math.floor(((value - first) * 60 - second) * 100)\n                    Alat = [(str(first), '\u00b0', str(second), '.', str(third))]\n                    temp_meta[Alat_head + i][5] = Alat\n                interval[5] = 0\n\n            # Az\n            if temp_meta[idx][6] == [] and interval[6] == 0:\n                interval[6] += 1\n                Az_head = idx\n            elif temp_meta[idx][6] == [] and interval[6] != 0:\n                interval[6] += 1\n            elif temp_meta[idx][6] != [] and interval[6] != 0:\n                front = float(temp_meta[Az_head - 1][6][0][0]) + float(temp_meta[Az_head - 1][6][0][2])/10\n                rear = float(temp_meta[idx][6][0][0]) + float(temp_meta[idx][6][0][2])/10\n                gap = rear - front\n                interval_gap = gap / interval[6]\n                for i in range(int(interval[6])):\n                    value = str(front + interval_gap * (i + 1)).split(\".\")\n                    first = value[0]\n                    second = value[1]\n                    Az = [(str(first), '.', str(second))]\n                    temp_meta[Az_head + i][6] = Az\n                interval[6] = 0\n            # El\n            if temp_meta[idx][7] == [] and interval[7] == 0:\n                interval[7] += 1\n                El_head = idx\n            elif temp_meta[idx][7] == [] and interval[7] != 0:\n                interval[7] += 1\n            elif temp_meta[idx][7] != [] and interval[7] != 0:\n                front = float(temp_meta[El_head - 1][7][0][0]) + float(temp_meta[El_head - 1][7][0][2]) / 10.\n                rear = float(temp_meta[idx][7][0][0]) + float(temp_meta[idx][7][0][2]) / 10.\n                gap = rear - front\n                interval_gap = gap / interval[7]\n                for i in range(int(interval[7])):\n                    value = str(front + interval_gap * (i + 1)).split(\".\")\n                    first = value[0]\n                    second = value[1]\n                    El = [(str(first), '.', str(second))]\n                    print(\"El : \", El)\n                    temp_meta[El_head + i][7] = El\n                interval[7] = 0\n\n        for inter_idx in range(len(temp_meta)):\n            re_frame_dict = {}\n            re_frame_dict[meta_list[0]] = temp_meta[inter_idx][0]\n            re_frame_dict[meta_list[1]] = str(temp_meta[inter_idx][1][0][0]) + \\\n                                          \"\u00b0\" + str(temp_meta[inter_idx][1][0][2]) + \\\n                                          \".\" + str(temp_meta[inter_idx][1][0][4]) + \"'\"\n            re_frame_dict[meta_list[2]] = str(temp_meta[inter_idx][2][0][0]) + \\\n                                          \"\u00b0\" + str(temp_meta[inter_idx][2][0][2]) + \\\n                                          \".\" + str(temp_meta[inter_idx][2][0][4]) + \"'\"\n            re_frame_dict[meta_list[3]] = temp_meta[inter_idx][3]\n            re_frame_dict[meta_list[4]] = str(temp_meta[inter_idx][4][0][0]) + \\\n                                          \"\u00b0\" + str(temp_meta[inter_idx][4][0][2]) + \\\n                                          \".\" + str(temp_meta[inter_idx][4][0][4]) + \"'\"\n            re_frame_dict[meta_list[5]] = str(temp_meta[inter_idx][5][0][0]) + \\\n                                          \"\u00b0\" + str(temp_meta[inter_idx][5][0][2]) + \\\n                                          \".\" + str(temp_meta[inter_idx][5][0][4]) + \"'\"\n            re_frame_dict[meta_list[6]] = str(temp_meta[inter_idx][6][0][0]) + \\\n                                          \".\" + str(temp_meta[inter_idx][6][0][2]) + \"\u00b0\"\n            print(inter_idx, temp_meta[inter_idx][7])\n            re_frame_dict[meta_list[7]] = str(temp_meta[inter_idx][7][0][0]) + \\\n                                          \".\" + str(temp_meta[inter_idx][7][0][2]) + \"\u00b0\"\n            re_frame_dict[meta_list[8]] = str(temp_meta[inter_idx][8][0][0]) + \\\n                                          \"-\" + str(temp_meta[inter_idx][8][0][1]) + \\\n                                          \"-\" + str(temp_meta[inter_idx][8][0][2])\n            re_frame_dict[meta_list[9]] = str(temp_meta[inter_idx][9][0][0]) + \\\n                                          \":\" + str(temp_meta[inter_idx][9][0][1]) + \\\n                                          \":\" + str(temp_meta[inter_idx][9][0][2])\n\n            interpolated_meta.append(re_frame_dict)\n        with open(output, \"w\", encoding='UTF-8-sig', newline='') as f:\n            writer = csv.DictWriter(f, fieldnames=meta_list)\n            writer.writeheader()\n            for data in interpolated_meta:\n                writer.writerow(data)\n            print(\"FINISHED.\")\n\ni = meta_info()\n# i.geo_info(frame_folder_dir=\"E:\\\\2021_coastguard\\\\frame\\\\D_frames\")\ni.interpolation(input=\"E:\\\\2021_coastguard\\\\coastguard_git\\\\test_psm8.csv\",\n                output=\"E:\\\\2021_coastguard\\\\coastguard_git\\\\test_psm8_interpolated.csv\",\n                interpolation=True)\n"}], "num_files": 1}
{"repo_name": "Vlad-Gorobiy/Hillel_homework", "repo_url": "https://github.com/Vlad-Gorobiy/Hillel_homework", "gha_language": "Python", "files": [{"blob_id": "a5dc95aaaaeabdda0304e488449edae1b9ae7981", "path": "/Task1/main.py", "content_id": "d3a67e04a27af9bb94aab175cd02b0f026685769", "language": "Python", "length_bytes": 5988, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.5978193879127502, "alpha_fraction": 0.5451553463935852, "num_lines": 175, "avg_line_length": 26.777143478393555, "max_line_length": 121, "content": "#1) \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c dict() \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043b\u044e\u0447\u0435\u0439 \u043d\u0438\u0436\u0435 \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435 (key : key* key).\n# \u2028keys = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\u2028\u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: {1: 1, 2: 4, 3: 9 \u2026}\u2028\nprint(\"Task \u21161\")\nmy_dict = {}\nfor i in range(1,11):\n    my_dict[i] = i**2\nprint(my_dict)\nprint(\"*\" * 100)\n\n#2) \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432(list()). \u0418\u0437 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 0 \u0434\u043e 100 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430.\u2028\nprint(\"Task \u21162\")\nmy_list = list(range(0,100,2))\nprint(my_list)\nprint(\"*\" * 100)\n\n#3)\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u043d\u0430 \u0433\u043b\u0430\u0441\u043d\u044b\u0435. \u2028\n# \u0435\u0449\u0435 \u0434\u0443\u043c\u0430\u044e\nprint(\"Task \u21163\")\nprint(\"-\")\nprint(\"*\" * 100)\n#-\n\n#4)\u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\u0435\u043b.\u2028[10, 11, 2, 3, 5, 8, 23, 11, 2, 5, 76, 43, 2, 32, 76, 3, 10, 0, 1]\u2028\n#4.1) \u0443\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u043d\u0435\u0433\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b\n#4.2) \u0432\u044b\u0432\u0435\u0441\u0442\u0438 3 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n#4.3) \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u043d\u0434\u0435\u043a\u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n#4.4) \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\u2028\nprint(\"Task \u21164\")\nmy_list_num = [10, 11, 2, 3, 5, 8, 23, 11, 2, 5, 76, 43, 2, 32, 76, 3, 10, 0, 1]\n#4.1\ncopy_list_num = my_list_num[:]\nfor num in copy_list_num:\n    if copy_list_num.count(num) > 1:\n        copy_list_num.remove(num)\nprint(copy_list_num)\n#4.2\ncopy_list_num = my_list_num[:]\ncopy_list_num.sort()\nprint(f'max numbers in list: {copy_list_num[-1]},{copy_list_num[-2]},{copy_list_num[-3]}')\n#4.3\nprint(my_list_num.index(min(my_list_num)))\n#4.4\nmy_list_num.reverse()\nprint(my_list_num)\nprint(\"*\" * 100)\n\n#5) \u041d\u0430\u0439\u0442\u0438 \u043e\u0431\u0449\u0438\u0435 \u043a\u043b\u044e\u0447\u0438 \u0432 \u0434\u0432\u0443\u0445 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\u0445:\u2028\n#dict_one = { \u2018a\u2019: 1,\u2028 \u2018b\u2019: 2, \u2018c\u2019: 3,\u2028 \u2018d\u2019: 4 }\n#\u2028dict_two = { \u2018a\u2019: 6,\u2028 \u2018b\u2019: 7, \u2018z\u2019: 20,\u2028 \u2018x\u2019: 40 }\u2028\nprint(\"Task \u21165\")\ndict_one = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\ndict_two = { 'a': 6, 'b': 7, 'z': 20, 'x': 40}\nfor key in dict_one.keys():\n    if key in dict_two.keys():\n        print(key)\nprint(\"*\" * 100)\n\nprint(\"Task \u21166\")\n#6)\u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439\u2028\ndata = [\n    {'name': 'Viktor', 'city': 'Kiev', 'age': 30 },\n    {'name': 'Maksim', 'city': 'Dnepr', 'age': 20},\n    {'name': 'Vladimir', 'city': 'Lviv', 'age': 32},\n    {'name': 'Andrey', 'city': 'Kiev', 'age': 34},\n    {'name': 'Artem', 'city': 'Dnepr', 'age': 50},\n    {'name': 'Dmitriy', 'city': 'Lviv', 'age': 21}]\n#6.1) \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043a\u043b\u044e\u0447\u0430 \u2018age'\u2028\ni = 0\nmax = 0\nwhile i < len(data):\n    j = 0\n    while j < len(data) - 1:\n        if data[j].get('age') > data[j + 1].get('age'):\n            data[j], data[j + 1] = data[j + 1], data[j]\n        j += 1\n    i += 1\n\nfor item in data:\n    print(item)\nprint('~' * 100)\n#6.2) \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043a\u043b\u044e\u0447\u0430 'city'\u2028\n# \"\u0415\u0449\u0435 \u0434\u0443\u043c\u0430\u044e\"\n#result = {}\n#for i in range(0, len(data)):\n#    result[data[i].get('city')] [{'name':data[i].get('name'), 'age':data[i].get('age')}]\n#print(result)\nprint(\"*\" * 100)\n\n# 7) \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0443\u044e\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n# \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\nprint(\"Task 7\")\ndef most_frequent(list_var):\n    max_count = 0\n    dict_max_val = {}\n    for i in range(0, len(list_var)):\n        if list_var.count(list_var[i]) > max_count:\n            max_count = list_var.count(list_var[i])\n\n    for i in range(0, len(list_var)):\n        if list_var.count(list_var[i]) == max_count:\n            dict_max_val.update({list_var[i]: max_count})\n    return dict_max_val\n\nprint(most_frequent(['aa','aa', 'bb', 'bb', 'bb']))\nprint(\"*\" * 100)\n\n# 8) \u0414\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0446\u0438\u0444\u0440 \u0432 \u044d\u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043d\u0443\u043b\u0435\u0439.\n# \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\n# \u0414\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e 123405. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u0443\u0434\u0435\u0442: 1*2*3*4*5=120.\nprint(\"Task \u21168\")\nnumbrs = 123405\nmult = 1\nwhile numbrs > 0:\n    if numbrs%10:\n        mult *= numbrs%10\n    numbrs = numbrs // 10\nprint(mult)\nprint(\"*\" * 100)\n\n# 9) \u0415\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0438 \u0447\u0438\u0441\u043b\u043e n (def some_function(array, n)).\n# \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 n-\u0443\u044e \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c n. \u0415\u0441\u043b\u0438 n \u0437\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0442\u043e\u0433\u0434\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c -1.\nprint(\"Task \u21169\")\ndef chek_int_in_input(str):\n    for digit in str:\n        if digit.isdigit():\n            return int(digit)\n        else:\n            return 1\n\ndef some_func(array, n):\n    if n > len(array):\n        return -1\n    for it in range(0, len(array)):\n        if it == n:\n            array[it] *= n\n            break\n    return array\n\narray_positive_num = [1, 2, 3, 4, 5]\ninp_num = chek_int_in_input(input(\"Enter number:\"))\nprint(some_func(array_positive_num, inp_num))\nprint(\"*\" * 100)\n\n# 10) \u0415\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 (\u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0431\u0435\u043b \u043c\u0435\u0436\u0434\u0443 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0438/\u0438\u043b\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438).\n# \u0421\u043b\u043e\u0432\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0431\u0443\u043a\u0432. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0442\u0440\u0438 \u0441\u043b\u043e\u0432\u0430\u00a0\u043f\u043e\u0434\u0440\u044f\u0434.\n# \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430, \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \"hello 1\u00a0one two three\u00a015 world\" \u0435\u0441\u0442\u044c \u0442\u0440\u0438 \u0441\u043b\u043e\u0432\u0430 \u043f\u043e\u0434\u0440\u044f\u0434.\nprint(\"Task \u211610\")\nstr ='hello 1 one two three 15 world'\nspl_str = str.split(\" \")\nstart = end = 0\nwhile end < len(spl_str):\n    if spl_str[end].isalpha():\n        if end - start == 2:\n            print(spl_str[start: end + 1])\n        end +=1\n    else:\n        start = end = end + 1\n"}], "num_files": 1}
{"repo_name": "SanneLaan/ResAppy", "repo_url": "https://github.com/SanneLaan/ResAppy", "gha_language": "Python", "files": [{"blob_id": "dcd91120fc6aeb7f19fde6321cb20166d12c64c6", "path": "/recipes/views.py", "content_id": "3199433c62f8f8a53063edd41e2612b3aff245fd", "language": "Python", "length_bytes": 1152, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.7430555820465088, "alpha_fraction": 0.7378472089767456, "num_lines": 39, "avg_line_length": 28.179487228393555, "max_line_length": 159, "content": "from django.views.generic.edit import CreateView, UpdateView, DeleteView\nfrom django.core.urlresolvers import reverse_lazy\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import authenticate, login\nfrom django.views import generic\nfrom django.views.generic import View\nfrom .models import Recipe\nfrom .forms import UserForm\n\nclass IndexView(generic.ListView):\n\ttemplate_name = 'recipes/index.html'\n\tcontext_object_name = 'all_recipes'\n\t\n\tdef get_queryset(self):\n\t\treturn Recipe.objects.all()\n\t\n\t\nclass DetailView(generic.DetailView):\n\tmodel = Recipe\n\ttemplate_name = 'recipes/detail.html'\n\t\n\nclass RecipeCreate(CreateView):\n\tmodel = Recipe \n\tfields = ['recipe_title', 'recipe_type', 'kitchen', 'time_in_minutes', 'recipe_description', 'ingredient_1', 'ingredient_2', 'ingredient_3', 'recipe_picture']\n\t\nclass RecipeUpdate(UpdateView):\n\tmodel = Recipe \n\tfields = ['recipe_title', 'recipe_type', 'kitchen', 'time_in_minutes', 'recipe_description', 'ingredient_1', 'ingredient_2', 'ingredient_3', 'recipe_picture']\n\t\nclass RecipeDelete(DeleteView):\n\tmodel = Recipe\n\tsuccess_url = reverse_lazy('recipes:index')\n\t\n\n\n\n\n\\\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t"}, {"blob_id": "6b9191297cd7089331379784bd20d4a4c9a3dbd2", "path": "/recipes/urls.py", "content_id": "af6aad059f5d7196d0fa7a29c0153e585729e1f3", "language": "Python", "length_bytes": 620, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.6048387289047241, "alpha_fraction": 0.5919354557991028, "num_lines": 22, "avg_line_length": 26.090909957885742, "max_line_length": 92, "content": "from django.conf.urls import url\r\nfrom . import views\r\n\r\napp_name = 'recipes'\r\n\r\nurlpatterns = [\r\n\t# /recipes/\r\n    url(r'^$', views.IndexView.as_view(), name='index'),\r\n\t\r\n\t# /recipes/<recipe_id>/\r\n\turl(r'^(?P<pk>[0-9]+)/$', views.DetailView.as_view(), name='detail'),\r\n\t\r\n\t# /recipes/recipe/add/\r\n\turl(r'recipe/add/$', views.RecipeCreate.as_view(), name='recipe-add'),\r\n\t\r\n\t# /recipes/recipe/2/\r\n\turl(r'recipe/(?P<pk>[0-9]+)/$', views.RecipeUpdate.as_view(), name='recipe-update'),\r\n\t\r\n\t# /recipes/recipe/2/delete/\r\n\turl(r'recipe/(?P<pk>[0-9]+)/delete/$', views.RecipeDelete.as_view(), name='recipe-delete'),\r\n\t\r\n]\r\n\r\n"}, {"blob_id": "21dd33fea2ac5d3e7d9009782e9aac15076e18bb", "path": "/recipes/migrations/0005_recipe_recipe_type.py", "content_id": "ea077caf425ecf592206a844208cfaa45c05bec2", "language": "Python", "length_bytes": 481, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.5987526178359985, "alpha_fraction": 0.5239084959030151, "num_lines": 20, "avg_line_length": 23.049999237060547, "max_line_length": 77, "content": "# -*- coding: utf-8 -*-\n# Generated by Django 1.10.4 on 2017-01-08 17:39\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('recipes', '0004_auto_20170108_1419'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='recipe',\n            name='recipe_type',\n            field=models.CharField(default='e.g. Main Dish', max_length=500),\n        ),\n    ]\n"}, {"blob_id": "e44fef020ab7e9fab5ec9e7a3db66bdb930b9e30", "path": "/recipesite/urls.py", "content_id": "27e43fbcf95342124541bdd926a46213f0376b34", "language": "Python", "length_bytes": 710, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.7521126866340637, "alpha_fraction": 0.7521126866340637, "num_lines": 19, "avg_line_length": 36.3684196472168, "max_line_length": 85, "content": "from django.conf.urls import include, url\nfrom django.contrib import admin\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom companies import views\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^recipes/', include('recipes.urls')),\n    url(r'^stocks/', views.StockList.as_view()),\n    url(r'^$', RedirectView.as_view(url='/recipes/', permanent=False), name='index'),\n]\n\nurlpatterns = format_suffix_patterns(urlpatterns)\n\nif settings.DEBUG:\n\turlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n\turlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"blob_id": "5d56a0b50b0b1223857e1d6e5d7626114acbb2c8", "path": "/recipes/migrations/0002_auto_20170107_1613.py", "content_id": "31c66b43d296a631f897d9e10668ad459c9c17ec", "language": "Python", "length_bytes": 1597, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.5428929328918457, "alpha_fraction": 0.5247339010238647, "num_lines": 49, "avg_line_length": 31.59183692932129, "max_line_length": 114, "content": "# -*- coding: utf-8 -*-\n# Generated by Django 1.10.4 on 2017-01-07 15:13\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('recipes', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Ingredient',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('ingredient_type', models.CharField(max_length=10)),\n                ('is_favorite', models.BooleanField(default=False)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Recipe',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('kitchen', models.CharField(max_length=250)),\n                ('recipe_title', models.CharField(max_length=500)),\n                ('time', models.IntegerField()),\n                ('recipe_picture', models.FileField(upload_to='')),\n            ],\n        ),\n        migrations.RemoveField(\n            model_name='song',\n            name='album',\n        ),\n        migrations.DeleteModel(\n            name='Album',\n        ),\n        migrations.DeleteModel(\n            name='Song',\n        ),\n        migrations.AddField(\n            model_name='ingredient',\n            name='recipe',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recipes.Recipe'),\n        ),\n    ]\n"}, {"blob_id": "7f2d97a8782cccf9ff38ad8cd1f6a48882c33d31", "path": "/recipes/migrations/0007_auto_20170108_2151.py", "content_id": "f20a513a2b6d5f646fdf726d9cbbec1bc38afa56", "language": "Python", "length_bytes": 436, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.5825688242912292, "alpha_fraction": 0.5321100950241089, "num_lines": 20, "avg_line_length": 20.799999237060547, "max_line_length": 48, "content": "# -*- coding: utf-8 -*-\n# Generated by Django 1.10.4 on 2017-01-08 20:51\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('recipes', '0006_recipe_ingredient_1'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='recipe',\n            old_name='time',\n            new_name='time_in_minutes',\n        ),\n    ]\n"}, {"blob_id": "0f3643834ad3fc94a1c402a9bd214a6fd532c9de", "path": "/recipes/models.py", "content_id": "976ff486074d6504fd2b740aa819f29278e842e4", "language": "Python", "length_bytes": 1021, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.7316356301307678, "alpha_fraction": 0.7042115330696106, "num_lines": 28, "avg_line_length": 35.42856979370117, "max_line_length": 79, "content": "from django.db import models\nfrom django.core.urlresolvers import reverse\n\n\nclass Recipe(models.Model):\n\tkitchen = models.CharField(max_length=250, default='e.g. Italian')\n\trecipe_title = models.CharField(max_length=500, default='e.g. Lasagna')\n\trecipe_description = models.CharField(max_length=10000, default='What to do?')\n\ttime_in_minutes = models.IntegerField()\n\trecipe_picture = models.FileField()\n\trecipe_type = models.CharField(max_length=500, default='e.g. Main Dish')\n\tingredient_1 = models.CharField(max_length=500, default='')\n\tingredient_2 = models.CharField(max_length=500, default='')\n\tingredient_3 = models.CharField(max_length=500, default='')\n\t\n\t\n\tdef get_absolute_url(self):\n\t\treturn reverse('recipes:detail', kwargs={'pk': self.pk})\n\t\n\tdef __str__(self):\n\t\treturn self.recipe_title + ' - ' + self.kitchen\n\t\nclass Ingredient(models.Model):\n\trecipe = models.ForeignKey(Recipe, on_delete=models.CASCADE)\n\tingredient_type = models.CharField(max_length=10)\n\t\n\tdef __str__(self):\n\t\treturn self.recipe_title\t\n"}, {"blob_id": "ffb3ff4ba2f03b8e005c025fbad161751c7408da", "path": "/recipes/migrations/0004_auto_20170108_1419.py", "content_id": "f44f724a82f669deb8e8f4739d1156a31379446b", "language": "Python", "length_bytes": 859, "detected_licenses": [], "license_type": "no_license", "src_encoding": "UTF-8", "is_vendor": false, "is_generated": false, "alphanum_fraction": 0.5774155855178833, "alpha_fraction": 0.540162980556488, "num_lines": 30, "avg_line_length": 27.633333206176758, "max_line_length": 76, "content": "# -*- coding: utf-8 -*-\n# Generated by Django 1.10.4 on 2017-01-08 13:19\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('recipes', '0003_recipe_recipe_description'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='recipe',\n            name='kitchen',\n            field=models.CharField(default='e.g. Italian', max_length=250),\n        ),\n        migrations.AlterField(\n            model_name='recipe',\n            name='recipe_description',\n            field=models.CharField(default='What to do?', max_length=10000),\n        ),\n        migrations.AlterField(\n            model_name='recipe',\n            name='recipe_title',\n            field=models.CharField(default='e.g. Lasagna', max_length=500),\n        ),\n    ]\n"}], "num_files": 8}
